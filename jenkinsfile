pipeline {
    agent any
    
    parameters {
        string(name: 'IMAGE_NAME', defaultValue: '', description: 'Docker image name')
        string(name: 'BRANCH_NAME', defaultValue: 'branch5', description: 'Branch name to clone')
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'Docker image tag')
        string(name: 'CONTAINER_NAME', defaultValue: '', description: 'Docker container name')
        string(name: 'DOCKER_HUB_USERNAME', defaultValue: 'derickdevops', description: 'Dockerhub user name')
        string(name: 'DOCKER_HUB_PASSWORD', defaultValue: '', description: 'Dockerhub password')
    }
    
    environment {
        DOCKER_CREDENTIALS_ID = 'DOCKER_HUB' // The ID of the credentials you added in Jenkins
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the repository from the specified branch
                    git url: 'https://github.com/derickdevops/win2.git', branch: "${params.BRANCH_NAME}"
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Print the Docker image tag for verification
                    echo "Building Docker image with tag: ${params.IMAGE_TAG}"
                    
                    // Build the Docker image
                    sh '''
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f Dockerfile .
                    '''
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Remove existing container if it exists
                    sh '''
                        if [ $(docker ps -aq -f name=${CONTAINER_NAME}) ]; then
                            docker rm -f ${CONTAINER_NAME}
                        fi
                        # Run the Docker container
                        docker run -d --name ${CONTAINER_NAME} -p 3006:3000 ${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }
        
        stage('Push the Image to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                        sh '''
                            echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin
                            docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_HUB_USERNAME}/${IMAGE_NAME}:latest
                            docker push ${DOCKER_HUB_USERNAME}/${IMAGE_NAME}:latest
                        '''
                    }
                }
            }
        }
    }
}

